name: Build and Test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # Prepare apt cache dir
    - name: Prepare apt cache dir
      run: mkdir -p ${HOME}/.apt-cache/partial

    # Download .deb files into cache dir (but donâ€™t install yet)
    - name: Download dependencies (deb only)
      run: |
        sudo apt-get update
        sudo apt-get -o dir::cache::archives="${HOME}/.apt-cache" \
          install --download-only -y \
          libboost-json-dev clang-tidy ccache

    # Cache downloaded deb files (now we have actual content)
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: ${HOME}/.apt-cache
        key: ${{ runner.os }}-apt-${{ hashFiles('apt-packages.txt') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    # Install dependencies from local cache (no new downloads if cache hit)
    - name: Install dependencies
      run: |
        sudo apt-get -o dir::cache::archives="${HOME}/.apt-cache" \
          install -y libboost-json-dev clang-tidy ccache

    # Prepare ccache dir
    - name: Prepare ccache dir
      run: mkdir -p ${HOME}/.ccache

    # Cache ccache
    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ${{ runner.os }}-ccache-${{ env.BUILD_TYPE }}-${{ hashFiles('CMakeLists.txt', '**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: |
          ${{ runner.os }}-ccache-${{ env.BUILD_TYPE }}-

    # Configure CMake with ccache enabled
    - name: Configure CMake
      run: |
        cmake -S ${{ github.workspace }} -B ${{ github.workspace }}/build \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

    # Build the project
    - name: Build
      run: cmake --build ${{ github.workspace }}/build -- -j$(nproc)

    # Run tests
    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: ctest \
        --output-on-failure \
        --timeout 300 \
        --schedule-random \
        --parallel $(nproc)
